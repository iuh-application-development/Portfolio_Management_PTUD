#!/usr/bin/env python
"""
Script ch·∫°y test cho Portfolio Management System.
H·ªó tr·ª£ c√°c lo·∫°i test kh√°c nhau: functional, performance, unit, integration.
"""

import os
import sys
import argparse
import subprocess
import time
from pathlib import Path

# Th√™m src v√†o Python path
PROJECT_ROOT = Path(__file__).parent.parent
SRC_PATH = PROJECT_ROOT / 'src'
sys.path.insert(0, str(SRC_PATH))

def run_command(command, cwd=None):
    """Ch·∫°y command v√† hi·ªÉn th·ªã output."""
    print(f"üîÑ ƒêang ch·∫°y: {command}")
    print("-" * 60)
    
    start_time = time.time()
    result = subprocess.run(
        command,
        shell=True,
        cwd=cwd or PROJECT_ROOT,
        capture_output=False
    )
    end_time = time.time()
    
    print(f"‚è±Ô∏è  Th·ªùi gian th·ª±c hi·ªán: {end_time - start_time:.2f} gi√¢y")
    print("-" * 60)
    return result.returncode

def run_functional_tests():
    """Ch·∫°y functional tests."""
    print("üß™ CH·∫†Y FUNCTIONAL TESTS")
    return run_command("pytest tests/functional/ -v --tb=short")

def run_performance_tests():
    """Ch·∫°y performance tests."""
    print("‚ö° CH·∫†Y PERFORMANCE TESTS")
    return run_command("pytest tests/performance/ -v --tb=short -s")

def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ tests."""
    print("üîÑ CH·∫†Y T·∫§T C·∫¢ TESTS")
    return run_command("pytest tests/ -v --cov=src/portfolio --cov-report=html --cov-report=term")

def run_quick_tests():
    """Ch·∫°y quick tests (lo·∫°i tr·ª´ performance tests)."""
    print("‚ö° CH·∫†Y QUICK TESTS")
    return run_command("pytest tests/functional/ -v --tb=short -x")

def run_coverage_report():
    """T·∫°o coverage report."""
    print("üìä T·∫†O COVERAGE REPORT")
    return run_command("pytest tests/ --cov=src/portfolio --cov-report=html --cov-report=term-missing")

def run_stress_tests():
    """Ch·∫°y stress tests."""
    print("üí™ CH·∫†Y STRESS TESTS")
    return run_command("pytest tests/performance/test_stress_testing.py -v -s")

def run_load_tests():
    """Ch·∫°y load tests."""
    print("üîÑ CH·∫†Y LOAD TESTS")
    return run_command("pytest tests/performance/test_load_testing.py -v -s")

def setup_test_environment():
    """Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng test."""
    print("üîß THI·∫æT L·∫¨P M√îI TR∆Ø·ªúNG TEST")
    
    # C√†i ƒë·∫∑t test dependencies
    if not os.path.exists(PROJECT_ROOT / 'venv'):
        print("‚ùå Virtual environment kh√¥ng t·ªìn t·∫°i!")
        print("Vui l√≤ng t·∫°o virtual environment tr∆∞·ªõc.")
        return False
    
    # Install test requirements
    install_cmd = "pip install -r tests/requirements_test.txt"
    return run_command(install_cmd) == 0

def clean_test_artifacts():
    """D·ªçn d·∫πp c√°c file test artifacts."""
    print("üßπ D·ªåN D·∫∏P TEST ARTIFACTS")
    
    artifacts = [
        ".coverage",
        "tests/coverage_html",
        ".pytest_cache",
        "**/__pycache__",
        "**/*.pyc"
    ]
    
    for pattern in artifacts:
        if pattern.startswith("**"):
            run_command(f"find . -name '{pattern.replace('**/', '')}' -delete")
        else:
            if os.path.exists(pattern):
                if os.path.isdir(pattern):
                    run_command(f"rm -rf {pattern}")
                else:
                    run_command(f"rm -f {pattern}")

def main():
    parser = argparse.ArgumentParser(description="Portfolio Management Test Runner")
    parser.add_argument(
        'test_type',
        choices=['functional', 'performance', 'all', 'quick', 'coverage', 'stress', 'load', 'setup', 'clean'],
        help='Lo·∫°i test c·∫ßn ch·∫°y'
    )
    parser.add_argument(
        '--parallel', '-p',
        action='store_true',
        help='Ch·∫°y tests song song'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Hi·ªÉn th·ªã output chi ti·∫øt'
    )
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üß™ PORTFOLIO MANAGEMENT TEST RUNNER")
    print("=" * 60)
    
    # Thay ƒë·ªïi working directory
    os.chdir(PROJECT_ROOT)
    
    start_time = time.time()
    
    if args.test_type == 'setup':
        success = setup_test_environment()
    elif args.test_type == 'clean':
        clean_test_artifacts()
        success = True
    elif args.test_type == 'functional':
        success = run_functional_tests() == 0
    elif args.test_type == 'performance':
        success = run_performance_tests() == 0
    elif args.test_type == 'all':
        success = run_all_tests() == 0
    elif args.test_type == 'quick':
        success = run_quick_tests() == 0
    elif args.test_type == 'coverage':
        success = run_coverage_report() == 0
    elif args.test_type == 'stress':
        success = run_stress_tests() == 0
    elif args.test_type == 'load':
        success = run_load_tests() == 0
    else:
        print(f"‚ùå Lo·∫°i test kh√¥ng h·ª£p l·ªá: {args.test_type}")
        success = False
    
    end_time = time.time()
    total_time = end_time - start_time
    
    print("=" * 60)
    if success:
        print("‚úÖ TESTS HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
    else:
        print("‚ùå TESTS TH·∫§T B·∫†I!")
    
    print(f"‚è±Ô∏è  T·ªïng th·ªùi gian: {total_time:.2f} gi√¢y")
    print("=" * 60)
    
    # Coverage report location
    if args.test_type in ['all', 'coverage']:
        print(f"üìä Coverage report: {PROJECT_ROOT}/tests/coverage_html/index.html")
    
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main()) 